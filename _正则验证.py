# 邮箱：re.match(r'^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$'，邮箱）

# 手机号：re.match(r'^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d{8}$'，手机号）

# 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}

# 身份证号：re.match(r'^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$',"11010519880605371X")

# 车牌号：re.match(r'^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$',"京K39006")

# 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)

# 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)

# 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$

# 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$

# 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$

# 日期格式：^\d{4}-\d{1,2}-\d{1,2}

# 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$

# 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$

# 空白行的正则表达式：\n\s*\r (可以用来删除空白行)

# HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? /> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)

# 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
#
# 校验一个字符串是否为中文
# def is_Chinese(word):
#     for ch in word:
#         if '\u4e00' <= ch <= '\u9fa5':
#             return True
#     return False
#
# 判断一个unicode是否是数字
# def is_number(uchar):
#     if uchar >= u'/u0030' and uchar<=u'/u0039':
#         return True
#     else:
#         return False
#
# 判断一个unicode是否是英文字母
# def is_alphabet(uchar):
#     if (uchar >= u'/u0041' and uchar<=u'/u005a') or (uchar >= u'/u0061' and uchar<=u'/u007a'):
#         return True
#     else:
#         return False
#
#
# 校验一个字符串是否是合法IP地址
# def checkip(ip):
#     p = re.compile('^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$')
#     if p.match(ip):
#         return True
#     else:
#         return False
#
# IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)
# IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
# InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$
#
# 匹配特定数字：
# ^[1-9]d*$　 　 //匹配正整数
# ^-[1-9]d*$ 　 //匹配负整数
# ^-?[1-9]d*$　　 //匹配整数
# ^[1-9]d*|0$　 //匹配非负整数（正整数 + 0）
# ^-[1-9]d*|0$　　 //匹配非正整数（负整数 + 0）
# ^[1-9]d*.d*|0.d*[1-9]d*$　　 //匹配正浮点数
# ^-([1-9]d*.d*|0.d*[1-9]d*)$　 //匹配负浮点数
# ^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$　 //匹配浮点数
# ^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）
# ^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）
# 评注：处理大量数据时有用，具体应用时注意修正